import os
import requests
import re
import time
import random
from dotenv import load_dotenv
from utils.orlando_parks import get_orlando_parks

# Carrega as vari√°veis do arquivo .env
load_dotenv()

class ZAPIService:
    def __init__(self):
        # Usando as vari√°veis de ambiente configuradas
        self._base_url = os.getenv("ZAPI_BASE_URL")
        self._instance_id = os.getenv("ZAPI_INSTANCE_ID")
        self._instance_token = os.getenv("ZAPI_INSTANCE_TOKEN")
        self._client_token = os.getenv("ZAPI_CLIENT_TOKEN")
        self._headers = {"Content-Type": "application/json"}
        
        print(f"üîß ZAPI configurada com: \nURL: {self._base_url}\nID: {self._instance_id}")
        
    def __validate_message(self, message: str) -> bool:
        # Trata a mensagem
        message_clean = message.strip()

        # Verifica se a mensagem n√£o est√° vazia
        if not message_clean:
            print("‚ùå Dados incompletos: A mensagem √© obrigat√≥ria.")
            return False

        return True

    def __validate_cell_number(self, cell_number: str) -> bool:
        # Verifica se o celular n√£o est√° vazio
        if not cell_number:
            print(f"[Z-API] ‚ùå Dados incompletos: O n√∫mero de telefone √© obrigat√≥rio.")
            return False

        # Trata o telefone
        cell_number_clean = cell_number.strip()

        # Remove caracteres n√£o num√©ricos
        cell_number_clean = re.sub(r"[^0-9]", "", cell_number_clean)

        # Verifica tamanho m√≠nimo (11 d√≠gitos = DDD + Celular)
        if len(cell_number_clean) < 11:
            print(f"[Z-API] Telefone inv√°lido. O n√∫mero de celular deve conter no m√≠nimo 11 d√≠gitos (com DDD): {cell_number_clean}")
            return False

        # Verifica tamanho m√°ximo (13 d√≠gitos = 55 + DDD + Celular)
        if len(cell_number_clean) > 13:
            print(f"[Z-API] Telefone inv√°lido. O n√∫mero de celular deve conter no m√°ximo 13 d√≠gitos (com DDI e DDD): {cell_number_clean}")
            return False

        return True

    def _resolve_phone(self, phone: str) -> str:
        # Remove caracteres n√£o num√©ricos
        phone_clean = re.sub(r"[^0-9]", "", phone)
        
        # Adiciona o DDI 55 caso n√£o tenha
        if not phone_clean.startswith("55") and len(phone_clean) <= 11:
            return f"55{phone_clean}"

        return phone_clean

    def _resolve_url(self) -> str:
        return f"{self._base_url}/instances/{self._instance_id}/token/{self._instance_token}"

    def send_message(self, phone: str, message: str) -> tuple:
        if not self.__validate_message(message) or not self.__validate_cell_number(phone):
            print(f"[Z-API] Dados incompletos: mensagem: {message}, telefone: {phone}")
            return None, "Dados inv√°lidos"

        url = self._resolve_url() + "/send-text"
        headers = {**self._headers, "Client-Token": self._client_token}
        resolved_phone = self._resolve_phone(phone)
        
        payload = {
            "phone": resolved_phone,
            "message": message
        }

        try:
            print(f"[Z-API] Enviando mensagem para {resolved_phone}")
            response = requests.post(url, json=payload, headers=headers)
            response.raise_for_status()
            print(f"[Z-API] Resposta: {response.status_code}")
            
            return 200, "Mensagem enviada com sucesso!"
        except Exception as e:
            print(f"[Z-API] ‚ùå Falha ao enviar mensagem: {str(e)}")
            return None, str(e)

# Criando a inst√¢ncia global do servi√ßo
zapi_service = ZAPIService()

def send_message(phone_number, message):
    """
    Envia uma mensagem gen√©rica via ZAPI
    
    Args:
        phone_number (str): N√∫mero do WhatsApp (formato: 5511999999999)
        message (str): Conte√∫do da mensagem
    
    Returns:
        tuple: (status_code, response)
    """
    return zapi_service.send_message(phone_number, message)

def send_parks_list(phone_number):
    """
    Envia a lista de parques de Orlando via ZAPI
    
    Args:
        phone_number (str): N√∫mero do WhatsApp (formato: 5511999999999)
    
    Returns:
        tuple: (status_code, response)
    """
    # Obter lista de parques atrav√©s do m√≥dulo utilit√°rio
    parks, lista_numerada = get_orlando_parks()
    
    if not parks:
        return None, "N√£o foi poss√≠vel obter a lista de parques"
    
    # Montar mensagem
    mensagem = (
        f"üé¢ *Parques dispon√≠veis em Orlando* üé¢\n\n"
        f"{lista_numerada}\n\n"
        f"Para consultar as filas, responda apenas com o n√∫mero do parque desejado."
    )
    
    # Reutilizar a fun√ß√£o de envio
    return send_message(phone_number, message=mensagem)